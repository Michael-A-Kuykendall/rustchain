# 🌐 Mission 42 — API Server via Subcommand (Patched)
# Moves HTTP server trigger into CLI-controlled entrypoint.
# Affects: server/api.rs, lib.rs (no CLI override)

file: server/api.rs
---
use axum::{
    routing::{get, post},
    Router, Json,
};
use serde::{Deserialize, Serialize};
use std::net::SocketAddr;

#[derive(Deserialize)]
pub struct RunRequest {
    pub mission_yaml: String,
}

#[derive(Serialize)]
pub struct StatusResponse {
    pub status: String,
}

async fn run_mission(Json(req): Json<RunRequest>) -> Json<StatusResponse> {
    println!("Received mission: {}", req.mission_yaml);
    Json(StatusResponse { status: "started".into() })
}

async fn get_status() -> Json<StatusResponse> {
    Json(StatusResponse { status: "ok".into() })
}

pub async fn serve_api() {
    let app = Router::new()
        .route("/run", post(run_mission))
        .route("/status", get(get_status));

    let addr = SocketAddr::from(([127, 0, 0, 1], 8080));
    println!("API server running at http://{}", addr);
    axum::Server::bind(&addr)
        .serve(app.into_make_service())
        .await
        .unwrap();
}
---

file: lib.rs
---
pub mod api;
---
