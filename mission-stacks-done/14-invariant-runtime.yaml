# 14-invariant-runtime.yaml
description: |
  Adds runtime invariants to verify execution integrity and prevent invalid states.
  Provides invariant! macro and state validation hook.

tasks:
  - op: create
    file: src/testing/invariants.rs
    edit: |
      #[macro_export]
      macro_rules! invariant {
          ($cond:expr, $msg:expr) => {
              if !$cond {
                  panic!("Invariant failed: {}", $msg);
              }
          };
      }

      use crate::engine::context::ContextState;

      pub fn assert_invariants(state: &ContextState) {
          if state.history.len() > 1000 {
              panic!("Invariant violated: history too long");
          }

          if state.vars.len() > 500 {
              panic!("Invariant violated: too many vars");
          }
      }

      pub fn register_runtime_invariants() {
          println!("[Invariant] Default invariants registered");
      }
