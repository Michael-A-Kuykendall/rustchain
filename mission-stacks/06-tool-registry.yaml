mission:
  name: "RustChain: Tool Registry System"
  description: "Implements dynamic tool registration and management"
  steps:
    - id: create_tool_registry
      type: create
      file_path: "src/tools/registry.rs"
      content: |
        use crate::tools::Tool;
        use std::collections::HashMap;
        use std::sync::Arc;
        
        pub struct ToolRegistry {
            tools: HashMap<String, Arc<dyn Tool>>,
        }
        
        impl ToolRegistry {
            pub fn new() -> Self {
                Self {
                    tools: HashMap::new(),
                }
            }
            
            pub fn register(&mut self, tool: Arc<dyn Tool>) {
                self.tools.insert(tool.name().to_string(), tool);
            }
            
            pub fn get(&self, name: &str) -> Option<Arc<dyn Tool>> {
                self.tools.get(name).cloned()
            }
            
            pub fn list_names(&self) -> Vec<String> {
                self.tools.keys().cloned().collect()
            }
        }
    - id: update_tools_mod_registry
      type: edit
      file_path: "src/tools/mod.rs"
      content: |
        pub mod echo;
        pub mod math;
        pub mod registry;
        
        pub use echo::*;
        pub use math::*;
        pub use registry::*;
        
        use crate::core::error::Result;
        use async_trait::async_trait;
        
        #[derive(Debug)]
        pub enum ToolResult {
            Success(String),
            Error(String),
        }
        
        #[async_trait]
        pub trait Tool: Send + Sync {
            fn name(&self) -> &'static str;
            async fn invoke(&self, input: &str) -> Result<ToolResult>;
        }
    - id: test_registry
      type: test
      language: rust
      fail_on_error: false
