mission:
  name: "RustChain: Quick Codebase Audit - Find Stubs and Incomplete Code"
  description: |
    Scan the entire RustChain codebase to identify stubs, incomplete implementations,
    TODO items, and placeholder code that needs completion.

  steps:
    - id: find_todo_macros
      type: command
      command: "find . -name '*.rs' -exec grep -Hn 'todo!()\\|TODO\\|FIXME\\|unimplemented!' {} \\; || true"
      description: "Find all TODO macros and comments in Rust files"

    - id: find_placeholder_comments
      type: command  
      command: "find . -name '*.rs' -exec grep -Hn '// Should include\\|// Implements\\|// TODO\\|// FIXME\\|// Placeholder' {} \\; || true"
      description: "Find placeholder comments indicating incomplete implementation"

    - id: find_panic_unwrap_expect
      type: command
      command: "find . -name '*.rs' -exec grep -Hn 'panic!\\|.unwrap()\\|.expect(' {} \\; || true"
      description: "Find unsafe unwrap/expect/panic calls that need proper error handling"

    - id: find_empty_functions
      type: command
      command: "find . -name '*.rs' -exec grep -A 3 -B 1 'fn.*{$' {} \\; | grep -B 1 -A 3 '}$' || true"
      description: "Find potentially empty function implementations"

    - id: check_cargo_build_status
      type: command
      command: "if [ -f Cargo.toml ]; then cargo check 2>&1 | head -50; else echo 'No Cargo.toml found - Rust project not initialized'; fi"
      description: "Check if the Rust project compiles and show first 50 lines of errors"

    - id: find_yaml_missions_with_stubs
      type: command
      command: "find mission-stacks/ -name '*.yaml' -exec grep -l 'Should include\\|Implements.*\\./\\|TODO\\|placeholder' {} \\; || true"
      description: "Find mission YAML files with placeholder content"

    - id: generate_audit_report
      type: create_file
      file_path: "audit_logs/codebase_audit_report.md"
      content: |
        # RustChain Codebase Audit Report
        **Generated**: $(date)
        
        ## Summary
        This report identifies incomplete implementations, stubs, and areas requiring attention in the RustChain project.
        
        ## Files to Review
        - Check audit_logs/ for detailed command outputs from this mission
        - Look for TODO/FIXME comments and macros
        - Review unsafe unwrap/expect usage
        - Examine missions with placeholder content
        
        ## Next Steps
        1. Review each identified file
        2. Prioritize critical path implementations
        3. Replace stubs with working code
        4. Add proper error handling
        5. Complete placeholder content in missions
        
        ## Rust Project Status
        - Run `cargo check` to see current compilation status
        - Run `cargo test` to verify existing functionality
        
        ---
        *Generated by Executive Officer mission audit*
      description: "Create comprehensive audit report"

    - id: list_directory_structure
      type: command
      command: "tree -I 'target|node_modules|.git' -L 3 || find . -type d -not -path './.git*' -not -path './target*' | head -20"
      description: "Show current project structure for context"
